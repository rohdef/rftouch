// Generated by CoffeeScript 1.3.3

buster.testCase("ConnectivityMap with maps loaded", {
  setUp: function() {
    window.google = {};
    window.google.maps = {};
    return this.map = Ext.create('RfTouch.ConnectivityMap');
  },
  tearDown: function() {
    delete window.google.maps;
    delete window.google;
    return this.map.destroy();
  },
  "Map gets masked when offline event is fired": function() {
    var eventSimulation, map;
    map = this.map;
    eventSimulation = function() {
      return map.setOnline.call(map, false);
    };
    this.stub(map, "setMasked");
    eventSimulation();
    expect(map.setMasked).toHaveBeenCalledOnce();
    return expect(map.setMasked).toHaveBeenCalledWith(map.getOfflineMask());
  },
  "Map gets unmasked when online is fired after offline": function() {
    var eventSimulation, map;
    map = this.map;
    eventSimulation = function() {
      return map.setOnline.call(map, true);
    };
    this.stub(map, "setMasked");
    eventSimulation();
    expect(map.setMasked).toHaveBeenCalledOnce();
    return expect(map.setMasked).toHaveBeenCalledWith(false);
  },
  "online calls setOnline with true": function() {
    var map;
    map = this.map;
    this.stub(map, "setOnline");
    map.online();
    assert.calledOnce(map.setOnline);
    return assert.calledWith(map.setOnline, true);
  },
  "offline calls setOnline with false": function() {
    var map;
    map = this.map;
    this.stub(map, "setOnline");
    map.offline();
    expect(map.setOnline).toHaveBeenCalledOnce();
    return expect(map.setOnline).toHaveBeenCalledWith(false);
  }
});

buster.testCase("ConnectivityMap with maps not loaded", {
  setUp: function() {
    this.map = Ext.create('RfTouch.ConnectivityMap');
    return this.server = this.useFakeServer().create();
  },
  tearDown: function() {
    return this.map.destroy();
  },
  "When going online the map loads Google maps": function() {
    var map;
    map = this.map;
    this.stub(map, "loadMaps");
    this.stub(map, "setMasked");
    map.online();
    expect(map.loadMaps).toHaveBeenCalledOnce();
    return expect(map.setMasked).not.toHaveBeenCalled();
  },
  "The callback is executed when the script is loaded": function(done) {
    var map, path, server;
    map = this.map;
    this.stub(window.rohdef.rftouch, "gmap_cb");
    path = buster.env.contextPath + '/test-setup/res/google-maps-fake-response.js';
    map.setGoogleMapsApiPath(path);
    server = this.server;
    window.rohdef.rftouch.resumeTest = function() {
      expect(window.rohdef.rftouch.gmap_cb).toHaveBeenCalledOnce();
      return done();
    };
    return map.online();
  },
  "The callback is called with an API key": function(done) {
    var map, path, server;
    map = this.map;
    this.stub(window.rohdef.rftouch, "gmap_cb");
    path = buster.env.contextPath + '/test-setup/res/google-maps-fake-response.js';
    map.setGoogleMapsApiPath(path);
    server = this.server;
    window.rohdef.rftouch.resumeTest = function() {
      var scriptTag;
      scriptTag = document.getElementById("");
      if (server.requests.length > 0) {

      } else if ((scriptTag != null)) {

      }
      if ((typeof url !== "undefined" && url !== null)) {

      } else {
        console.warn("API key test can't be run. Either use XHR or give the script box the id: rohdef-test-gmap");
      }
      return done();
    };
    return map.online();
  }
});
